//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EasyPayCliente.ServicioEasyPay {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/EasyPay")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioEasyPay.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        EasyPayCliente.ServicioEasyPay.CompositeType GetDataUsingDataContract(EasyPayCliente.ServicioEasyPay.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<EasyPayCliente.ServicioEasyPay.CompositeType> GetDataUsingDataContractAsync(EasyPayCliente.ServicioEasyPay.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/guardarUsuarioReniec", ReplyAction="http://tempuri.org/IService1/guardarUsuarioReniecResponse")]
        bool guardarUsuarioReniec(string dni, string nombre, string apellido, string contraseña, string celular, string direccion, string fechaNacimiento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/guardarUsuarioReniec", ReplyAction="http://tempuri.org/IService1/guardarUsuarioReniecResponse")]
        System.Threading.Tasks.Task<bool> guardarUsuarioReniecAsync(string dni, string nombre, string apellido, string contraseña, string celular, string direccion, string fechaNacimiento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/guardarEmpresaSunat", ReplyAction="http://tempuri.org/IService1/guardarEmpresaSunatResponse")]
        bool guardarEmpresaSunat(string ruc, string nombrelegal, string direccioncorreoelectronico, string direccion, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/guardarEmpresaSunat", ReplyAction="http://tempuri.org/IService1/guardarEmpresaSunatResponse")]
        System.Threading.Tasks.Task<bool> guardarEmpresaSunatAsync(string ruc, string nombrelegal, string direccioncorreoelectronico, string direccion, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        bool login(string dni, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        System.Threading.Tasks.Task<bool> loginAsync(string dni, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/eliminarCuentaBancaria", ReplyAction="http://tempuri.org/IService1/eliminarCuentaBancariaResponse")]
        bool eliminarCuentaBancaria(string ruc, string contraseña, string NumeroCuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/eliminarCuentaBancaria", ReplyAction="http://tempuri.org/IService1/eliminarCuentaBancariaResponse")]
        System.Threading.Tasks.Task<bool> eliminarCuentaBancariaAsync(string ruc, string contraseña, string NumeroCuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/eliminarTarjetaEasyPay", ReplyAction="http://tempuri.org/IService1/eliminarTarjetaEasyPayResponse")]
        bool eliminarTarjetaEasyPay(string nrotarjeta, string dniusuario, string contra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/eliminarTarjetaEasyPay", ReplyAction="http://tempuri.org/IService1/eliminarTarjetaEasyPayResponse")]
        System.Threading.Tasks.Task<bool> eliminarTarjetaEasyPayAsync(string nrotarjeta, string dniusuario, string contra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertarCuentaBancaria", ReplyAction="http://tempuri.org/IService1/insertarCuentaBancariaResponse")]
        bool insertarCuentaBancaria(string NumeroCuenta, string TipoCuenta, string RUC, string Direccion, int CodigoSwift);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertarCuentaBancaria", ReplyAction="http://tempuri.org/IService1/insertarCuentaBancariaResponse")]
        System.Threading.Tasks.Task<bool> insertarCuentaBancariaAsync(string NumeroCuenta, string TipoCuenta, string RUC, string Direccion, int CodigoSwift);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/guardartarjeta", ReplyAction="http://tempuri.org/IService1/guardartarjetaResponse")]
        bool guardartarjeta(string nrotarjeta, string tipotarjeta, string fechavencimiento, string codigoseguridad, string direcciontarjeta, string dniusuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/guardartarjeta", ReplyAction="http://tempuri.org/IService1/guardartarjetaResponse")]
        System.Threading.Tasks.Task<bool> guardartarjetaAsync(string nrotarjeta, string tipotarjeta, string fechavencimiento, string codigoseguridad, string direcciontarjeta, string dniusuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saldo", ReplyAction="http://tempuri.org/IService1/saldoResponse")]
        string saldo(string usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saldo", ReplyAction="http://tempuri.org/IService1/saldoResponse")]
        System.Threading.Tasks.Task<string> saldoAsync(string usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/depositar", ReplyAction="http://tempuri.org/IService1/depositarResponse")]
        string depositar(string nrotarjeta, string cantidad, string propietario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/depositar", ReplyAction="http://tempuri.org/IService1/depositarResponse")]
        System.Threading.Tasks.Task<string> depositarAsync(string nrotarjeta, string cantidad, string propietario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/enviar", ReplyAction="http://tempuri.org/IService1/enviarResponse")]
        string enviar(string dniEmisor, string dniReceptor, string cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/enviar", ReplyAction="http://tempuri.org/IService1/enviarResponse")]
        System.Threading.Tasks.Task<string> enviarAsync(string dniEmisor, string dniReceptor, string cantidad);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EasyPayCliente.ServicioEasyPay.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EasyPayCliente.ServicioEasyPay.IService1>, EasyPayCliente.ServicioEasyPay.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public EasyPayCliente.ServicioEasyPay.CompositeType GetDataUsingDataContract(EasyPayCliente.ServicioEasyPay.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<EasyPayCliente.ServicioEasyPay.CompositeType> GetDataUsingDataContractAsync(EasyPayCliente.ServicioEasyPay.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool guardarUsuarioReniec(string dni, string nombre, string apellido, string contraseña, string celular, string direccion, string fechaNacimiento) {
            return base.Channel.guardarUsuarioReniec(dni, nombre, apellido, contraseña, celular, direccion, fechaNacimiento);
        }
        
        public System.Threading.Tasks.Task<bool> guardarUsuarioReniecAsync(string dni, string nombre, string apellido, string contraseña, string celular, string direccion, string fechaNacimiento) {
            return base.Channel.guardarUsuarioReniecAsync(dni, nombre, apellido, contraseña, celular, direccion, fechaNacimiento);
        }
        
        public bool guardarEmpresaSunat(string ruc, string nombrelegal, string direccioncorreoelectronico, string direccion, string contraseña) {
            return base.Channel.guardarEmpresaSunat(ruc, nombrelegal, direccioncorreoelectronico, direccion, contraseña);
        }
        
        public System.Threading.Tasks.Task<bool> guardarEmpresaSunatAsync(string ruc, string nombrelegal, string direccioncorreoelectronico, string direccion, string contraseña) {
            return base.Channel.guardarEmpresaSunatAsync(ruc, nombrelegal, direccioncorreoelectronico, direccion, contraseña);
        }
        
        public bool login(string dni, string pass) {
            return base.Channel.login(dni, pass);
        }
        
        public System.Threading.Tasks.Task<bool> loginAsync(string dni, string pass) {
            return base.Channel.loginAsync(dni, pass);
        }
        
        public bool eliminarCuentaBancaria(string ruc, string contraseña, string NumeroCuenta) {
            return base.Channel.eliminarCuentaBancaria(ruc, contraseña, NumeroCuenta);
        }
        
        public System.Threading.Tasks.Task<bool> eliminarCuentaBancariaAsync(string ruc, string contraseña, string NumeroCuenta) {
            return base.Channel.eliminarCuentaBancariaAsync(ruc, contraseña, NumeroCuenta);
        }
        
        public bool eliminarTarjetaEasyPay(string nrotarjeta, string dniusuario, string contra) {
            return base.Channel.eliminarTarjetaEasyPay(nrotarjeta, dniusuario, contra);
        }
        
        public System.Threading.Tasks.Task<bool> eliminarTarjetaEasyPayAsync(string nrotarjeta, string dniusuario, string contra) {
            return base.Channel.eliminarTarjetaEasyPayAsync(nrotarjeta, dniusuario, contra);
        }
        
        public bool insertarCuentaBancaria(string NumeroCuenta, string TipoCuenta, string RUC, string Direccion, int CodigoSwift) {
            return base.Channel.insertarCuentaBancaria(NumeroCuenta, TipoCuenta, RUC, Direccion, CodigoSwift);
        }
        
        public System.Threading.Tasks.Task<bool> insertarCuentaBancariaAsync(string NumeroCuenta, string TipoCuenta, string RUC, string Direccion, int CodigoSwift) {
            return base.Channel.insertarCuentaBancariaAsync(NumeroCuenta, TipoCuenta, RUC, Direccion, CodigoSwift);
        }
        
        public bool guardartarjeta(string nrotarjeta, string tipotarjeta, string fechavencimiento, string codigoseguridad, string direcciontarjeta, string dniusuario) {
            return base.Channel.guardartarjeta(nrotarjeta, tipotarjeta, fechavencimiento, codigoseguridad, direcciontarjeta, dniusuario);
        }
        
        public System.Threading.Tasks.Task<bool> guardartarjetaAsync(string nrotarjeta, string tipotarjeta, string fechavencimiento, string codigoseguridad, string direcciontarjeta, string dniusuario) {
            return base.Channel.guardartarjetaAsync(nrotarjeta, tipotarjeta, fechavencimiento, codigoseguridad, direcciontarjeta, dniusuario);
        }
        
        public string saldo(string usuario) {
            return base.Channel.saldo(usuario);
        }
        
        public System.Threading.Tasks.Task<string> saldoAsync(string usuario) {
            return base.Channel.saldoAsync(usuario);
        }
        
        public string depositar(string nrotarjeta, string cantidad, string propietario) {
            return base.Channel.depositar(nrotarjeta, cantidad, propietario);
        }
        
        public System.Threading.Tasks.Task<string> depositarAsync(string nrotarjeta, string cantidad, string propietario) {
            return base.Channel.depositarAsync(nrotarjeta, cantidad, propietario);
        }
        
        public string enviar(string dniEmisor, string dniReceptor, string cantidad) {
            return base.Channel.enviar(dniEmisor, dniReceptor, cantidad);
        }
        
        public System.Threading.Tasks.Task<string> enviarAsync(string dniEmisor, string dniReceptor, string cantidad) {
            return base.Channel.enviarAsync(dniEmisor, dniReceptor, cantidad);
        }
    }
}
